import visual_behavior.ophys.roi_processing.roi_processing as roi

import pandas as pd
import numpy as np
import itertools


# USING A MANIFEST


def get_number_exps_rois_matched(dataframe, length_check=False):
    """Input dataframe must have columns: "cell_specimen_id" and "valid_roi". Outputs columns for total number of matches found
    and total valid matches found (number of matches where the cell_specimen_id is valid)

    returns dataframe with new columns "total_matches" and "valid_matches"


    Arguments:
        dataframe {[type]} -- [description]

    Returns:
        [type] -- [description]
    """
    input_length = len(dataframe)
    total_matches = dataframe["cell_specimen_id"].value_counts().to_frame().reset_index()
    total_matches = total_matches.rename(columns={"index": "cell_specimen_id", "cell_specimen_id": "total_matches"})

    valid_matches = dataframe.loc[dataframe["valid_roi"] == True, "cell_specimen_id"].value_counts().to_frame().reset_index()
    valid_matches = valid_matches.rename(columns={"index": "cell_specimen_id", "cell_specimen_id": "valid_matches"})

    num_matches = pd.merge(total_matches, valid_matches, how="left", on="cell_specimen_id").fillna(0)
    num_matches["valid_matches"] = num_matches["valid_matches"].astype(int)

    dataframe = pd.merge(dataframe, num_matches, how="left", on="cell_specimen_id")
    output_length = len(dataframe)
    if length_check == True:
        print("input dataframe length = " + str(input_length) + " and output dataframe length = " + str(output_length))
    return dataframe


def get_number_total_matches(dataframe, length_check=False):
    input_length = len(dataframe)
    total_matches = dataframe["cell_specimen_id"].value_counts().to_frame().reset_index()
    total_matches = total_matches.rename(columns={"index": "cell_specimen_id", "cell_specimen_id": "total_matches"})
    dataframe = pd.merge(dataframe, total_matches, how="left", on="cell_specimen_id")
    return dataframe


def remove_unmatched_rois(dataframe, total_or_valid="valid"):
    """removes unmatched rois from a dataframe, but uses the columns generated by the "get_number_exps_rois_matched" function.


    Arguments:
        dataframe {[type]} -- [description]

    Keyword Arguments:
        total_or_valid {str} -- [description] (default: {"valid"})

    Returns:
        [type] -- [description]
    """
    if total_or_valid == "valid":
        matched_dataframe = dataframe.loc[dataframe["valid_matches"] > 1]
    elif total_or_valid == "total":
        matched_dataframe = dataframe.loc[total_matches["valid_matches"] > 1]
    else:
        print("please enter 'total' or 'valid' for total_or_valid")
    return matched_dataframe


def container_matched_roi_metrics(container_id,
                                  include_unmatched_rois=False,
                                  include_ffield_test=False,
                                  include_failed_sessions=False,
                                  include_failed_rois=False):
    """Generates a dataframe with the morphology metrics for an experiments in an experiment container.

    Arguments:
        container_id {[type]} -- [description]

    Keyword Arguments:
        include_unmatched_rois {bool} -- [whether or not to include cells that were only present in 1 experiment in the container] (default: {True})
        include_ffield_test {bool} -- [whether to include the full field test experiment session] (default: {False})
        include_failed_sessions {bool} -- [whether to include failed experiments in the manifest and subsequently retrieve roi metrics for those sessions] (default: {False})
        include_failed_rois {bool} -- [whether to include rois that were invalid. note that invalid rois may still be part of a matching set] (default: {False})

    Returns:
        [type] -- [description]
    """
    container_roi_metrics = roi.get_container_roi_metrics(container_id,
                                                          include_ffield_test=include_ffield_test,
                                                          include_failed_sessions=include_failed_sessions,
                                                          include_failed_rois=include_failed_rois)

    if include_unmatched_rois == False:
        container_roi_metrics = remove_unmatched_rois(container_roi_metrics)

    container_roi_metrics["cell_specimen_id"].astype(int)
    container_roi_metrics = container_roi_metrics.sort_values(["valid_matches", "cell_specimen_id"])
    container_roi_metrics = container_roi_metrics.reset_index(drop=True)

    return container_roi_metrics


def match_summary_for_experiment_list(experiment_list,
                                      include_failed_rois=False):

    experiments_metrics = roi.roi_metrics_for_experiment_list(experiment_list,
                                                              include_failed_rois=include_failed_rois)

    total_valid_cell_count = len(experiments_metrics["cell_specimen_id"].unique())

    matching_metrics = experiments_metrics.loc[experiments_metrics["valid_matches"] == len(experiment_list)]
    matched_cell_count = len(matching_metrics["cell_specimen_id"].unique())

    container_ids = matching_metrics["container_id"].unique()
    if len(container_ids) != 1:
        print("more than 1 container, cells will not match across experiments")
    container_id = container_ids[0]

    exps_list = matching_metrics["experiment_id"].unique()

    cell_specimen_ids = matching_metrics["cell_specimen_id"].unique()

    matching_summary_for_exps = pd.DataFrame({"experiments": [exps_list],
                                              "container_id": container_id,
                                              "matched_cell_count": matched_cell_count,
                                              "total_valid_cell_count": total_valid_cell_count,
                                              "cell_specimen_ids": [cell_specimen_ids]})
    return matching_summary_for_exps


def matching_cells_metrics_for_experiment_list(experiment_list, include_failed_rois=False):
    """gets metrics for cells that are matched across all experiments in the experiments list

    Arguments:
        experiment_list {[type]} -- [description]

    Keyword Arguments:
        include_failed_rois {bool} -- [description] (default: {False})
    """
    experiments_metrics = roi.roi_metrics_for_experiment_list(experiment_list, include_failed_rois=include_failed_rois)

    # remove any cell specimen ids that arent in all of the experiments
    experiments_metrics = experiments_metrics.loc[experiments_metrics["valid_matches"] == len(experiment_list)]
    return experiments_metrics


def container_matched_roi_morphology_metrics(container_id,
                                             include_unmatched_rois=True,
                                             include_ffield_test=False,
                                             include_failed_sessions=False,
                                             include_failed_rois=False):

    container_matched_metrics = container_matched_roi_metrics(container_id,
                                                              include_failed_rois=include_failed_rois,
                                                              include_unmatched_rois=include_unmatched_rois,
                                                              include_failed_sessions=include_failed_sessions,
                                                              include_ffield_test=include_ffield_test)

    morphology_metrics_columns = ["container_id",
                                  "experiment_id",
                                  "cell_specimen_id",
                                  "valid_matches",
                                  "total_matches",
                                  'area',
                                  'ellipseness',
                                  'compactness',
                                  'mean_intensity',
                                  'max_intensity',
                                  'mean_enhanced_intensity',
                                  'intensity_ratio',
                                  'soma_minus_np_mean',
                                  'soma_minus_np_std',
                                  'valid_roi',
                                  'exclusion_label_name',
                                  'stage_name']

    container_matched_morph_metrics = container_matched_metrics[morphology_metrics_columns].copy().reset_index(drop=True)

    return container_matched_morph_metrics


def get_experiment_pairs(group):
    pairs = itertools.combinations(group['experiment_id'], 2)
    return pairs


def get_matched_cells_experiment_pairs_df(matched_roi_morphology_metrics_df):
    morph_gb = matched_roi_morphology_metrics_df.groupby(by="cell_specimen_id")
    columns = ["cell_specimen_id", "exp1", "exp2"]
    cell_match_exp_pairs = pd.DataFrame(columns=columns)

    for cell_specimen_id in matched_roi_morphology_metrics_df["cell_specimen_id"].unique():
        pairs = list(pd.DataFrame(morph_gb.apply(get_experiment_pairs)).loc[cell_specimen_id].values[0])
        pairs = np.asarray(pairs)
        pairs_df = pd.DataFrame({"exp1": pairs[:, 0], "exp2": pairs[:, 1]})
        pairs_df.loc[:, "cell_specimen_id"] = cell_specimen_id
        pairs_df = pairs_df[["cell_specimen_id", "exp1", "exp2"]].copy()
        cell_match_exp_pairs = cell_match_exp_pairs.append(pairs_df, sort=True)
    cell_match_exp_pairs = cell_match_exp_pairs.reset_index(drop=True)
    return cell_match_exp_pairs


def get_cell_matched_exp_pairs_morph_metrics(matched_roi_morphology_metrics_df, cell_match_exp_pairs_df):
    """[summary]

    Arguments:
        matched_roi_morphology_metrics_df {[type]} -- [description]
        cell_match_exp_pairs_df {[type]} -- [description]

    Returns:
        [type] -- [description]
    """
    exp_pairs = pd.merge(cell_match_exp_pairs_df, matched_roi_morphology_metrics_df, left_on=["cell_specimen_id", "exp1"], right_on=["cell_specimen_id", "experiment_id"], how="inner")

    exp_pairs = exp_pairs.drop(["total_matches", "experiment_id"], axis=1)

    exp_pairs = exp_pairs.rename(columns={"area": 'area_exp1',
                                          'ellipseness': 'ellipseness_exp1',
                                          'compactness': 'compactness_exp1',
                                          'mean_intensity': 'mean_intensity_exp1',
                                          'max_intensity': 'max_intensity_exp1',
                                          'mean_enhanced_intensity': 'mean_enhanced_intensity_exp1',
                                          'intensity_ratio': 'intensity_ratio_exp1',
                                          'soma_minus_np_mean': 'soma_minus_np_mean_exp1',
                                          'soma_minus_np_std': 'soma_minus_np_std_exp1',
                                          'valid_roi': 'valid_roi_exp1',
                                          'exclusion_label_name': 'exclusion_label_name_exp1',
                                          'stage_name': 'stage_name_exp1'})

    exp_pairs = pd.merge(exp_pairs, matched_roi_morphology_metrics_df, left_on=["cell_specimen_id", "exp2"], right_on=["cell_specimen_id", "experiment_id"], how="inner")

    exp_pairs = exp_pairs.drop(["total_matches", "experiment_id"], axis=1)

    exp_pairs = exp_pairs.rename(columns={"area": 'area_exp2',
                                          'ellipseness': 'ellipseness_exp2',
                                          'compactness': 'compactness_exp2',
                                          'mean_intensity': 'mean_intensity_exp2',
                                          'max_intensity': 'max_intensity_exp2',
                                          'mean_enhanced_intensity': 'mean_enhanced_intensity_exp2',
                                          'intensity_ratio': 'intensity_ratio_exp2',
                                          'soma_minus_np_mean': 'soma_minus_np_mean_exp2',
                                          'soma_minus_np_std': 'soma_minus_np_std_exp2',
                                          'valid_roi': 'valid_roi_exp2',
                                          'exclusion_label_name': 'exclusion_label_name_exp2',
                                          'stage_name': 'stage_name_exp2'})

    exp_pairs["both_rois_valid"] = exp_pairs[["valid_roi_exp1", "valid_roi_exp2"]].all(axis="columns")
    return exp_pairs


def gen_experiment_pair_morph_metrics(container_id, include_failed_rois=False):

    # only want matched rois, but the rois don't have to be valid necessarily
    matched_roi_morphology_metrics_df = container_matched_roi_morphology_metrics(container_id,
                                                                                 include_unmatched_rois=False,
                                                                                 include_ffield_test=False,
                                                                                 include_failed_sessions=False,
                                                                                 include_failed_rois=include_failed_rois)

    experiment_pairs = get_matched_cells_experiment_pairs_df(matched_roi_morphology_metrics_df)
    exp_pair_morph_metrics = get_cell_matched_exp_pairs_morph_metrics(matched_roi_morphology_metrics_df, experiment_pairs)
    morph_metrics_pairs = get_cell_matched_exp_pairs_morph_metrics(matched_roi_morphology_metrics_df, experiment_pairs)
    exp_pair_morph_metrics.loc[:, "container_id"] = container_id
    return exp_pair_morph_metrics


def container_match_summary_df(container_id,
                               include_unmatched_rois=True,
                               include_failed_rois=True,
                               masks=False,
                               include_failed_sessions=False,
                               include_ffield_test=False):

    container_metrics = roi.get_container_roi_metrics(container_id,
                                                      include_ffield_test=include_ffield_test,
                                                      include_failed_sessions=include_failed_sessions,
                                                      include_failed_rois=include_failed_rois)

    # get container level information
    container_experiments_count = len(container_metrics["experiment_id"].unique())
    container_seg_cells_count = len(container_metrics["cell_specimen_id"].unique())
    container_valid_cells_count = len(container_metrics.loc[container_metrics["valid_roi"] == True, "cell_specimen_id"].unique())

    basic_info = pd.DataFrame({"container_id": container_id,
                               "exps_count": container_experiments_count,
                               "seg_rois_count": container_seg_cells_count,
                               "valid_cells_count": container_valid_cells_count}, index=[0])

    num_matched_df = pd.DataFrame()
    num_exps_matched_list = [1, 2, 3, 4, 5, 6]
    for num_matched in num_exps_matched_list:
        total_num = len(container_metrics.loc[container_metrics["total_matches"] == num_matched, "cell_specimen_id"].unique())
        valid_num = len(container_metrics.loc[container_metrics["valid_matches"] == num_matched, "cell_specimen_id"].unique())

        col_name = str(num_matched) + "_exp"
        total_num = len(container_metrics.loc[container_metrics["total_matches"] == num_matched, "cell_specimen_id"].unique())
        valid_num = len(container_metrics.loc[container_metrics["valid_matches"] == num_matched, "cell_specimen_id"].unique())
        df = pd.DataFrame({"num_exp_matched": col_name, "total": total_num, "valid": valid_num}, index=[0])
        num_matched_df = num_matched_df.append(df, sort=True)

    pivot = num_matched_df.pivot(columns="num_exp_matched")

    pivot.columns = ['{} {}'.format(col[1], col[0]) for col in pivot.columns]  # remove multi index and auto rename columns
    pivot = pivot.reindex(sorted(pivot.columns), axis=1)  # sort the columns
    pivot.loc[:, "container_id"] = container_id
    summary_df = pd.merge(basic_info, pivot, how="left", on="container_id")
    return summary_df


def exp_level_container_match_summary(container_id, masks=True, pivot=False):
    container_metrics = roi.get_container_roi_metrics(container_id,
                                                      include_ffield_test=False,
                                                      include_failed_sessions=False,
                                                      include_failed_rois=True)

    container_df = pd.DataFrame()
    experiments_list = container_metrics["experiment_id"].unique().tolist()
    for experiment_id in experiments_list:
        exp_seg_rois_count = len(container_metrics.loc[container_metrics["experiment_id"] == experiment_id,
                                                       "cell_specimen_id"].unique())

        exp_valid_cells_count = len(container_metrics.loc[(container_metrics["experiment_id"] == experiment_id) &
                                                          (container_metrics["valid_roi"] == True), "cell_specimen_id"].unique())
        basic_info = pd.DataFrame({"experiment_id": experiment_id,
                                   "seg_rois_count": exp_seg_rois_count,
                                   "valid_cells_count": exp_valid_cells_count},
                                  index=[0])

        if masks == True:
            blank_mask = roi.gen_blank_mask_of_FOV_dimensions(experiment_id)
            roi_metrics = roi.exp_roi_metrics_dataframe(experiment_id, shift=True)

        num_matched_df = pd.DataFrame()
        num_exps_matched_list = [1, 2, 3, 4, 5, 6]

        for num_matched in num_exps_matched_list:

            col_name = num_matched
            if pivot == True:
                col_name = str(num_matched) + "_exp"

            total_num = len(container_metrics.loc[(container_metrics["total_matches"] == num_matched) &
                                                  (container_metrics["experiment_id"] == experiment_id),
                                                  "cell_specimen_id"].unique())

            valid_num = len(container_metrics.loc[(container_metrics["valid_matches"] == num_matched) &
                                                  (container_metrics["experiment_id"] == experiment_id),
                                                  "cell_specimen_id"].unique())

            valid_csis = container_metrics.loc[(container_metrics["valid_matches"] == num_matched) &
                                               (container_metrics["experiment_id"] == experiment_id),
                                               "cell_specimen_id"].values

            if exp_valid_cells_count == 0:
                percent_of_valid = np.nan
            else:
                percent_of_valid = np.round(valid_num / exp_valid_cells_count, 2)
                # percent_of_valid = np.round(percent_of_valid, 2)

            if masks == True:
                if valid_num == 0:
                    valid_cells_mask = blank_mask
                else:
                    valid_cells_mask = roi.multi_roi_mask_from_df(roi_metrics, valid_csis)

            df = pd.DataFrame({"num_exp_matched": col_name,
                               "total": total_num,
                               "valid": valid_num,
                               "perc_of_exp_valid": percent_of_valid},
                              index=[0])
            if masks == True:
                df = pd.DataFrame({"num_exp_matched": col_name,
                                   "total": total_num,
                                   "valid": valid_num,
                                   "perc_of_exp_valid": percent_of_valid,
                                   "valid_mask": [valid_cells_mask]},
                                  index=[0])

            num_matched_df = num_matched_df.append(df, sort=True)

        if pivot == True:
            num_matched_df = num_matched_df.pivot(columns="num_exp_matched")
            num_matched_df.columns = ['{} {}'.format(col[1], col[0]) for col in num_matched_df.columns]  # remove multi index and auto rename columns
            num_matched_df = num_matched_df.reindex(sorted(num_matched_df.columns), axis=1)  # sort the columns

        num_matched_df.loc[:, "experiment_id"] = experiment_id
        num_matched_df["experiment_id"] = num_matched_df["experiment_id"].astype(int)

        experiment_df = pd.merge(basic_info, num_matched_df, how="left", on="experiment_id")
        container_df = container_df.append(experiment_df, sort=True)

    container_df = container_df.reset_index(drop=True)
    container_df.loc[:, "container_id"] = container_id

    return container_df


def container_exp_pairs_matching_summary(container_id):
    """uses itertools to list all combinations of experiments in the container and then for each experiment pair:
            -number of valid cells
            -number of matched cells
            -percent of cells matched

    Arguments:
        container_id {[type]} -- [description]

    Returns:
        pandas dataframe --  Produces a dataframe for a specific experiment container with the following columns:
                            "exp1": experiment id for first experiment in experiment pair
                            "exp1_stage_num": the stage number of the stage name for experiment 1 of the experiment pair
                            "exp2": experiment id for the second experiment in the experiment pair
                            "exp2_stage_num": the stage number of the stage name for experiment 2 of the experiment pair
                            "matched_count": the number of valid cells matched between the experiment pair
                            "perc_matched": the percentage of the valid cells that were matched (matched count /total valid count)
                            "total_valid_count": total number of valid cells for the experiment pair
    """
    container_metrics = roi.get_container_roi_metrics(container_id, include_failed_rois=False)
    container_csis = container_metrics[["container_id", "experiment_id", "stage_name", "cell_specimen_id", "valid_matches"]].copy()
    container_csis = roi.get_stage_num(container_csis)
    # container_csis.loc[:,"stage_num"] = container_csis.apply(stage_num, axis=1)
    experiments_list = container_metrics["experiment_id"].unique().tolist()
    exp_combos = list(itertools.combinations(experiments_list, 2))
    container_df = pd.DataFrame()
    for combo in exp_combos:
        combo = np.asarray(combo)
        exp_pair = container_csis.loc[container_csis["experiment_id"].isin(combo)].copy()

        exp1 = combo[0]
        exp2 = combo[1]

        exp1_stage_num = container_csis.loc[container_csis["experiment_id"] == exp1, "stage_num"].unique()[0]
        exp2_stage_num = container_csis.loc[container_csis["experiment_id"] == exp2, "stage_num"].unique()[0]

        total_valid = len(exp_pair["cell_specimen_id"].unique())
        exp_pair = get_number_total_matches(exp_pair)
        matches_btw_pair = len(exp_pair.loc[exp_pair["total_matches"] == 2, "cell_specimen_id"].unique())
        if total_valid == 0:
            perc_cells_matched = np.nan
        else:
            perc_cells_matched = np.round(matches_btw_pair / total_valid, 2)

        combo_df = pd.DataFrame({"exp1": exp1,
                                 "exp1_stage_num": exp1_stage_num,
                                 "exp2": exp2,
                                 "exp2_stage_num": exp2_stage_num,
                                 "total_valid_count": total_valid,
                                 "matched_count": matches_btw_pair,
                                 "perc_matched": perc_cells_matched}, index=[0])

        container_df = container_df.append(combo_df, sort=True)
    container_df.loc[:, "container_id"] = int(container_id)
    container_df = container_df.reset_index(drop=True)
    return container_df
